gui settings power, suspend after like 10 minutes of inactivity
make sudoers.d empty?
invalid login shells and stuff
BAD PACKAGES MAYBE
LEARN HOW TO DO MYSQL AND LOOK/MANIPULATE STUFF IN MYSQL DATABASE

https://github.com/Turb0Yoda/CyberPatriot-Scripts/blob/master/harden.sh

apt-get install auditd
	  #install auditing program
	auditctl -e 1
	  #Enable audits
	gedit /etc/audit/auditd.conf
	  #view and modify policies as needed


look in /var/log/apache2 stuff to firewall block from specific ip
grep -rRwFins "string" to find string in a thing
bluetooth visibility off
Language support gui?
require encryption password for backup?
check gui in general
gui firewall
bluetooth visibility gui?
online accounts gui?
def check out user accounts gui
Turn on backups? gui
DETAILS GUI CHECK ALL SETTINGS IMPORTANT


PHP LAB

Grant and delete admin priveleges on the mysql database

look at apache 2 stuff
	conf-available
	conf-enabled
	mods-available
	mods-enabled
	sites-available
	sites-enabled     <----------- def check this

/etc/php/7.0/cli/php.ini? LOOK AT PHP VERSION 

LOOK AT ALL MYSQL AND STUFF 
LOOK AT LAB

review some of this:
https://docs.google.com/document/d/1xy_1_Yvkl3f392iD_zV_G_2cig8EciBW/edit

look in /usr/share/applications

cd /home; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" | grep -v '\.' > /home/$CUSER/Desktop/weirdfiles.txt; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" |  grep txt >> /home/eelric/Desktop/weirdfiles.txt ; cd /root;  grep -rRwF --exclude /etc --exclude *.config "(text to search for)" | grep -v '\.' >> /home/$CUSER/Desktop/weirdfiles.txt; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" |  grep txt; cd /usr/share;   grep -rRwF --exclude /etc --exclude *.config "(text to search for)" | grep -v '\.' >> /home/$CUSER/Desktop/weirdfiles.txt; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" |  grep txt >> /home/eelric/Desktop/weirdfiles.txt; cd /sbin; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" | grep -v '\.' > /home/$CUSER/Desktop/weirdfiles.txt; grep -rRwF --exclude /etc --exclude *.config "(text to search for)" |  grep txt >> /home/eelric/Desktop/weirdfiles.txt; cat /home/$CUSER/Desktop/weirdfiles.txt

 ^ split by :

fix pam

search /usr/share for suspicious files from users

smb.conf needs to be fixed by editing user groups and such

ss -l for backdoors?

/etc/rc.local manual inspection
/var/spool/cron/crontabs
/etc/ftpusers for disallowed ftp users
/etc/bluetooth/main.conf dont allow pairable forever


check /etc/group for nopasswdlogin

/etc/bluetooth/input.conf
#-----------------------------------------------#
# Configuration file for the input service

# This section contains options which are not specific to any
# particular interface
[General]

# Set idle timeout (in minutes) before the connection will
# be disconnect (defaults to 0 for no timeout)
#IdleTimeout=30
#-----------------------------------------------#

/etc/bluetooth/network.conf
#-----------------------------------------------#
# Configuration file for the network service

[General]

# Disable link encryption: default=false
DisableSecurity=false
#-----------------------------------------------#

rfcomm.conf
#-----------------------------------------------#
make sure bind no; is uncommented
#-----------------------------------------------#

Compare this /etc/bash.bashrc file to the one in cypat, check for suspicious things:

#-------------------------------------------------------#
# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi

# sudo hint
if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ] ; then
    case " $(groups) " in *\ admin\ *)
    if [ -x /usr/bin/sudo ]; then
	cat <<-EOF
	To run a command as administrator (user "root"), use "sudo <command>".
	See "man sudo_root" for details.
	
	EOF
    fi
    esac
fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi
#-----------------------------------------------------#


check all crons in /etc and definitely check /var/spool/cron


debconf.conf file
#----------------------------------------------------------------#
# This is the main config file for debconf. It tells debconf where to
# store data. The format of this file is a set of stanzas. Each stanza
# except the first sets up a database for debconf to use. For details, see
# debconf.conf(5) (in the debconf-doc package).
#
# So first things first. This first stanza gives the names of two databases.

# Debconf will use this database to store the data you enter into it,
# and some other dynamic data.
Config: configdb
# Debconf will use this database to store static template data.
Templates: templatedb

# World-readable, and accepts everything but passwords.
Name: config
Driver: File
Mode: 644
Reject-Type: password
Filename: /var/cache/debconf/config.dat

# Not world readable (the default), and accepts only passwords.
Name: passwords
Driver: File
Mode: 600
Backup: false
Required: false
Accept-Type: password
Filename: /var/cache/debconf/passwords.dat

# Set up the configdb database. By default, it consists of a stack of two
# databases, one to hold passwords and one for everything else.
Name: configdb
Driver: Stack
Stack: config, passwords

# Set up the templatedb database, which is a single flat text file
# by default.
Name: templatedb
Driver: File
Mode: 600
Filename: /var/cache/debconf/templates.dat

# Well that was pretty straightforward, and it will be enough for most
# people's needs, but debconf's database drivers can be used to do much
# more interesting things. For example, suppose you want to use config 
# data from another host, which is mounted over nfs or perhaps the database
# is accessed via LDAP. You don't want to write to the remote debconf database,
# just read from it, so you still need a local database for local changes.
#
# A remote NFS mounted database, read-only. It is optional; if debconf
# fails to use it it will not abort.
#Name: remotedb
#Driver: DirTree
#Directory: /mnt/otherhost/var/cache/debconf/config
Readonly: true
Required: false
#
# A remote LDAP database. It is also read-only. The password is really
# only necessary if the database is not accessible anonymously.
# Option KeyByKey instructs the backend to retrieve keys from the LDAP
# server individually (when they are requested), instead of loading all
# keys at startup. The default is 0, and should only be enabled if you
# want to track accesses to individual keys on the LDAP server side.
#Name: remotedb
#Driver: LDAP
#Server: remotehost
#BaseDN: cn=debconf,dc=domain,dc=com
#BindDN: uid=admin,dc=domain,dc=com
#BindPasswd: secret
#KeyByKey: 0
#
# A stack consisting of two databases. Values will be read from
# the first database in the stack to contain a value. In this example,
# writes always go to the first database.
#Name: fulldb
#Driver: Stack
#Stack: configdb, remotedb
#
# In this example, we'd use Config: fulldb at the top of the file
# to make it use the combination of the databases.
#
# Even more complex and interesting setups are possible, see the 
# debconf.conf(5) page for details.
#----------------------------------------------------------------------#


add to /etc/dhclient.conf :

#-------------------------
default-lease-time 600;
max-lease-time 7200;
#------------------------

Check /etc/network/interfaces


change /etc/fuse.conf to: MAKE SURE TO HAVE "user_allow_other" commented
#---------------------------------------------------------------------------#
# /etc/fuse.conf - Configuration file for Filesystem in Userspace (FUSE)

# Set the maximum number of FUSE mounts allowed to non-root users.
# The default is 1000.
#mount_max = 1000

# Allow non-root users to specify the allow_other or allow_root mount options.
#user_allow_other
#----------------------------------------------------------------------------#


From the Gnome Panel, click System->Preferences->Removable Drives and Media
and then uncheck the first two boxes on the storage tab. This will turn off
automounting for everything not defined in /etc/fstab, and you can turn it 
back on if desired as easily.

Make sure /etc/gdb is clean
make sure /etc/gdbinit

check /etc/grub.d/README for suspicious files

List and configure startup processes? sysv-rc-conf --list command

check /etc/skel for weird files (might add malicious files to home directory of any new users created)

